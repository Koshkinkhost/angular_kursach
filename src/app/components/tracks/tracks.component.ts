import { Component,OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators, FormsModule } from '@angular/forms';
import { TracksService } from '../top-tracks-main/tracks.service'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
import { EditTracks } from '../../all-tracks/EditTracks'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
import {ReactiveFormsModule} from '@angular/forms'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
import { Router } from '@angular/router';
import { Track } from '../top-tracks-main/TopTrack';
  import { RegistrationService } from '../../registration/RegistrationService';
import { Artist } from '../Artist';
@Component({
  selector: 'app-tracks',
  standalone: true,
  imports: [FormsModule,ReactiveFormsModule], // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
  providers: [],
  templateUrl: './tracks.component.html',
  styleUrls: ['./tracks.component.css']
})
export class TracksComponent {
  albumTrackFiles: (File | null)[] = [];

  selectedContentType: 'track' | 'album' = 'track'; // –¢–∏–ø –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  trackForm: FormGroup;
  tracks:EditTracks[]=[];
  selected_artist:Artist={id:'',name:''};
  albumForm: FormGroup;
  genres: string[] = ['Pop', 'Rock', 'Hip-Hop', 'Blues', 'Classical', 'Electronic'];
  selectedFile: File | null = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  mapToTrack(data: any): Track {
    return {
      id:Number(data.trackId),
      title: data.title,
      trackArtist: data.track_Artist,
      genreTrack: data.genre_track,
      listenersCount: Number(data.listeners_count)
    };
  }
  constructor(private fb: FormBuilder, private tracksService: TracksService,private router:Router,private registr:RegistrationService) {
    
    // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    this.trackForm = this.fb.group({
      title: ['', Validators.required],
      genreTrack: ['', Validators.required], // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ genre_track
    });

    // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
    this.albumForm = this.fb.group({
      Name: ['', Validators.required], // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞
      releaseDate: ['', Validators.required], // –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞
      tracks: this.fb.array([]), // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ç—Ä–µ–∫–æ–≤
    });
  }

  async ngOnInit(){
    this.tracksService.tracks$.subscribe((tracks: EditTracks[]) => {
      this.tracks = tracks; // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    });
    this.tracksService.selectedArtist$.subscribe((artist: Artist | null) => {
      if (artist) {
        this.selected_artist = artist;
      }
    });
    console.log("–∞–π–¥–∏ –∞—Ä—Ç–∏—Å—Ç–∞",Number(this.selected_artist.id));
    const isAuthenticated =  await this.registr.CheckAuthentication();
    // const role_check=await this.registr.Check_Roles();
    // console.log(role_check);//–ø—Ä–æ–≤–µ—Ä–∫–∞ –†–û–õ–ò
  
    const storage_name=localStorage.getItem('username');
    if (isAuthenticated && storage_name) {
     
      const data=await this.tracksService.GetArtistTracks(Number(this.selected_artist.id));
  this.tracks=data.tracks.map(this.mapToTrack);
    console.log(data);
    
  
  
      // –í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
       // –ü–æ–¥–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    } else {
        this.router.navigate(['/login']);
    }
  
   
    
   
  
  }

  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã –∞–ª—å–±–æ–º–∞
  get tracksFormArray() {
    return this.albumForm.get('tracks') as FormArray;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.selectedFile = input.files[0]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
      console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', this.selectedFile);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç—Ä–µ–∫–∞
  addTrackField() {
    const trackGroup = this.fb.group({
      title: ['', Validators.required],
      genreTrack: ['', Validators.required],
    });
  
    this.tracksFormArray.push(trackGroup);
    this.albumTrackFiles.push(null); // –î–æ–±–∞–≤–ª—è–µ–º "–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ" –ø–æ–¥ —Ñ–∞–π–ª
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
  async addTrack() {
    console.log(this.trackForm.value);
    if (this.trackForm.invalid || !this.selectedFile) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É EditTracks
    const newTrack: EditTracks = {
      ArtistId: Number(this.selected_artist.id), // ID –∞—Ä—Ç–∏—Å—Ç–∞
      trackId: null, // ID —Ç—Ä–µ–∫–∞ (–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
      title: this.trackForm.value.title, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
      trackArtist: this.tracksService.selected_artist.name, // –ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞
      genreTrack: this.trackForm.value.genreTrack, // –ñ–∞–Ω—Ä —Ç—Ä–µ–∫–∞
      AlbumId: null, // ID –∞–ª—å–±–æ–º–∞ (–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
      listenersCount: 0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
      isEditing: false, // –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
    };

    try {
      // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å —Ñ–∞–π–ª–æ–º
      const result = await this.tracksService.AddTrack(newTrack, this.selectedFile);
      console.log('–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', result);
      alert('–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
  async addAlbum() {
    
  
    const tracksDto = this.albumForm.value.tracks.map((track: any, index: number) => ({
      title: track.title,
      Genre_track: track.genreTrack,
      listeners_count: 0 // –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }));
  
    const albumDto = {
      Title: this.albumForm.value.Name,
      ReleaseDate: this.albumForm.value.releaseDate,
      ArtistId: Number(this.selected_artist.id),
      Tracks: tracksDto
    };
    console.log(this.albumForm.value.tracks);

    const formData = new FormData();
    formData.append('albumData', JSON.stringify(albumDto)); // üëà –ö–õ–Æ–ß–ï–í–û–ô –º–æ–º–µ–Ω—Ç
  
    this.albumTrackFiles.forEach((file, index) => {
      if (file) {
        formData.append('audioFiles', file); // üëà –≤–∞–∂–Ω–æ: –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
      }
    });
  
    try {
      const result = await this.tracksService.AddAlbumWithTracks(formData);
      alert('–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      this.albumForm.reset();
      this.albumTrackFiles = [];
      this.tracksFormArray.clear();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞.');
    }
  }
  
  
  
  
  
  onTrackFileSelected(event: Event, index: number): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.albumTrackFiles[index] = input.files[0]; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞
      console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞:', this.albumTrackFiles[index]);
    }
  }
  
  
}